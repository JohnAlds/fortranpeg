// Code compiler module

module tokenizer
implicit none

contains
function nextSym(input, cursor) result(lexeme)
    character(len=*), intent(in) :: input
    integer, intent(inout) :: cursor
    character(len=:), allocatable :: lexeme

    if (cursor > len(input)) then
        allocate( character(len=3) :: lexeme )
        lexeme = "EOF"
        return
    end if
    
     
        if ("100" == input(cursor:cursor + 2)) then !Foo
            allocate(character(len=3) :: lexeme)
            lexeme = input(cursor:cursor + 2)
            cursor = cursor + 3
            return
        end if
        

    if ("string" == input(cursor:cursor + 5)) then !Foo
        allocate( character(len=6) :: lexeme)
        lexeme = input(cursor:cursor + 5)
        cursor = cursor + 6
        return
    end if
    

    print *, "error lexico en col ", cursor, ', "'//input(cursor:cursor)//'"'
    lexeme = "ERROR"
end function nextSym
end module tokenizer 
        
        
      
program test_tokenizer
    use tokenizer 
    implicit none

    character(len=20) :: input = "100string"
    integer :: cursor = 1
    character(len=:), allocatable :: lex

    do
        lex = nextSym(input, cursor)
        print *, "Lexema: ", lex
        if (lex == "EOF" .or. lex == "ERROR") exit
    end do
end program test_tokenizer


