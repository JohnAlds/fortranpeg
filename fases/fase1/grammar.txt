module tokenizer
implicit none

contains
function nextSym(input, cursor) result(lexeme)
    character(len=*), intent(in) :: input
    integer, intent(inout) :: cursor
    character(len=:), allocatable :: lexeme

    if (cursor > len(input)) then
        allocate(character(len=3) :: lexeme)
        lexeme = "EOF"
        return
    end if

    if (cursor + 2 <= len(input) .and. "100" == input(cursor:cursor + 2)) then
        allocate(character(len=3) :: lexeme)
        lexeme = input(cursor:cursor + 2)
        cursor = cursor + 3
        return
    end if

    if (cursor + 5 <= len(input) .and. "string" == input(cursor:cursor + 5)) then
        allocate(character(len=6) :: lexeme)
        lexeme = input(cursor:cursor + 5)
        cursor = cursor + 6
        return
    end if

    print *, "error lexico en col ", cursor, ', "'//input(cursor:cursor)//'"'
    allocate(character(len=5) :: lexeme)
    lexeme = "ERROR"
    cursor = cursor + 1  ! Avanzar el cursor para continuar procesando
end function nextSym
end module tokenizer

program test_tokenizer
    use tokenizer
    implicit none

    character(len=:), allocatable :: input
    integer :: cursor = 1
    character(len=:), allocatable :: lex

    input = "100string55xyz100"  ! Entrada de prueba con errores

    do
        lex = nextSym(input, cursor)
        print *, "Lexema: ", lex
        if (lex == "EOF") exit
    end do
end program test_tokenizer
